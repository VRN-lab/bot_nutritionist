import os
import logging
import re

import sqlite3
from telegram.constants import ParseMode
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    filters, ContextTypes,
    CommandHandler, MessageHandler, CallbackQueryHandler,
    CallbackContext, Application
)
from dotenv import load_dotenv

from texts import start_message, result_message

conn = sqlite3.connect('data.db')
c = conn.cursor()


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.ERROR
)

load_dotenv()
TOKEN = os.getenv('TOKEN')
START_MESSAGE = start_message
RESULT_MESSAGE = result_message


c.execute('''
    CREATE TABLE IF NOT EXISTS anthropometry (
        user_id INTEGER PRIMARY KEY,
        name TEXT DEFAUL None,
        height INTEGER DEFAULT 0,
        weight INTEGER DEFAULT 0,
        age INTEGER DEFAULT 0,
        sex INTEGER DEFAULT 0
    )
''')
conn.commit()


async def sex():
    keyboard = [
        [
            InlineKeyboardButton('–ú—É–∂—Å–∫–æ–π', callback_data='Male'),
            InlineKeyboardButton('–ñ–µ–Ω—Å–∫–∏–π', callback_data='Female'),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


async def confirm_or_refresh():
    keyboard = [
        [
            InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='Confirm'),
            InlineKeyboardButton('–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ', callback_data='Refresh'),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


async def incoming():
    keyboard = [
        [InlineKeyboardButton(
            '–•–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å',
            url='https://t.me/lena_kamchatka'
        )],
    ]
    return InlineKeyboardMarkup(keyboard)


async def add_user_id(update: Update, context: CallbackContext) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É
    """
    user_id = update.effective_user.id
    c.execute(
        "INSERT OR IGNORE INTO anthropometry (user_id) VALUES (?)", (user_id,)
    )
    conn.commit()


async def column_name():
    """
    –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–±—Ü–∞
    """
    c.execute('SELECT * FROM anthropometry')

    column_names = [description[0] for description in c.description]

    return column_names


async def receiving_data(
    update: Update, context: CallbackContext, value
) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id

    try:
        c.execute(
            f"SELECT {value} FROM anthropometry WHERE user_id = ?",
            (user_id,)
        )
        result = c.fetchone()[0]

        return result
    except TypeError:
        return


async def add_user_in_db(
        update: Update, context: CallbackContext, column, value
) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É
    """
    user_id = update.effective_user.id

    c.execute(
        "INSERT OR IGNORE INTO anthropometry (user_id) VALUES (?)", (user_id,)
    )
    c.execute(
        f"UPDATE anthropometry SET {column} = ? WHERE user_id = ?",
        (value, user_id),
    )

    conn.commit()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–∞—Å—á–µ—Ç,
    –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    chat_id = update.effective_chat.id
    user_name = update.effective_user.first_name
    user_name_full = update.effective_user.full_name
    sum_result = await result(update, context)
    column_names = await column_name()
    await add_user_id(update, context)
    await add_user_in_db(update, context, column_names[1], user_name_full)
    check_age = await receiving_data(update, context, column_names[4])
    if check_age == 0:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f'–ü—Ä–∏–≤–µ—Ç {user_name} üëã\n\n{START_MESSAGE}',
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=await sex()
        )
    elif check_age != 0:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f'*–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç = {sum_result}*\n\n'
            f'–ù–∞–∂–º–∏—Ç–µ –≤ _–º–µ–Ω—é_ *–ø–æ–≤—Ç–æ—Ä–∏—Ç—å*, —á—Ç–æ –±—ã —Ä–∞—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n\n'
            f'{RESULT_MESSAGE}',
            parse_mode=ParseMode.MARKDOWN,
        )


async def callback_handler(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
    """
    query = update.callback_query
    data = query.data
    chat_id = update.effective_chat.id
    column_names = await column_name()
    sum_result = await result(update, context)
    await query.answer()
    if data == 'Male':
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup([])
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text='–í–≤–µ–¥–∏—Ç–∞ –í–∞—à —Ä–æ—Å—Ç –≤ —Å–º.',
        )
        await add_user_in_db(update, context, column_names[5], 5)
    elif data == 'Female':
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup([])
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text='–í–≤–µ–¥–∏—Ç–∞ –í–∞—à —Ä–æ—Å—Ç –≤ —Å–º.',
        )
        await add_user_in_db(update, context, column_names[5], 161)
    elif data == 'Confirm':
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup([])
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text=f'–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç {sum_result}\n\n{RESULT_MESSAGE}',
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=await incoming()
        )
    elif data == 'Refresh':
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup([])
        )
        await refresh(update, context)
        await context.bot.send_message(
            chat_id=chat_id,
            text='–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥. –í–∞—à –ø–æ–ª:',
            reply_markup=await sex()
        )


async def message_handler(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    message = update.message.text
    chat_id = update.effective_chat.id
    column_names = await column_name()
    check_height = await receiving_data(update, context, column_names[2])
    check_weight = await receiving_data(update, context, column_names[3])
    check_age = await receiving_data(update, context, column_names[4])
    pattern = r'^\d*\.?\d+$'
    pattern_2 = r'^\d+'
    if check_height == 0:
        if re.match(pattern_2, message):
            await add_user_in_db(update, context, column_names[2], message)
            await context.bot.send_message(
                chat_id=chat_id,
                text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ –Ω–∞–ø—Ä–∏–º–µ—Ä 50 –∏–ª–∏ 50.2',
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã',
            )
    if check_height != 0:
        if check_weight == 0:
            if re.match(pattern, message):
                await add_user_in_db(update, context, column_names[3], message)
                await context.bot.send_message(
                    chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç',
                )
            else:
                await context.bot.send_message(
                    chat_id=chat_id, text='–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –Ω–∞–ø—Ä–∏–º–µ—Ä 61 –∏–ª–∏ 61.7, –≤–≤–æ–¥ –≥—Ä–∞–º–º–æ–≤ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É',  # noqa
                )
    if check_weight != 0:
        if check_age == 0:
            if re.match(pattern_2, message):
                await add_user_in_db(update, context, column_names[4], message)
                await check(update, context)
            else:
                await context.bot.send_message(
                    chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã',
                )


async def check(update, context):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ–∫—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    column_names = await column_name()
    chat_id = update.effective_chat.id
    height = await receiving_data(update, context, column_names[2])
    weight = await receiving_data(update, context, column_names[3])
    age = await receiving_data(update, context, column_names[4])
    text = f"""
    *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö*\n
    –†–æ—Å—Ç - {height}  —Å–º
    –í–µ—Å - {weight}   –∫–≥
    –í–æ–∑—Ä–∞—Å—Ç - {age}  –ª–µ—Ç/–≥–æ–¥(–∞)\n
    –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ *<–ü–æ–¥—Ç–µ—Ä–¥–∏—Ç—å>*,
    –µ—Å–ª–∏ –Ω–∞–¥–æ —á—Ç–æ —Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ *<–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ>*
    """
    await context.bot.send_message(
        chat_id=chat_id, text=text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=await confirm_or_refresh()
    )


async def result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º –ø–æ —Ñ–æ—Ä–º—É–ª–µ
    """
    column_names = await column_name()
    height = await receiving_data(update, context, column_names[2])
    weight = await receiving_data(update, context, column_names[3])
    age = await receiving_data(update, context, column_names[4])
    sex = await receiving_data(update, context, column_names[5])
    try:
        if int(sex) == 5:
            summ = (
                (9.99 * float(weight)) + (6.25 * float(height)) -
                (4.92 * int(age)) + int(sex)
            )

            return "{:.2f}".format(summ)
        elif int(sex) == 161:
            summ = (
                (9.99 * int(weight)) + (6.25 * float(height)) -
                (4.92 * int(age)) - int(sex)
            )
            return "{:.2f}".format(summ)

    except TypeError:

        return


async def refresh(update: Update, context: CallbackContext) -> None:
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã refresh
    –∏ –∑–∞–ø—Å—É–∫–∞–µ–º –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ
    """
    user_id = update.effective_user.id
    c.execute(
        "UPDATE anthropometry SET height = 0 WHERE user_id = ?", (user_id,)
    )
    c.execute(
        "UPDATE anthropometry SET weight = 0 WHERE user_id = ?", (user_id,)
    )
    c.execute(
        "UPDATE anthropometry SET age = 0 WHERE user_id = ?", (user_id,)
    )
    c.execute(
        "UPDATE anthropometry SET sex = 0 WHERE user_id = ?", (user_id,)
    )

    conn.commit()
    await start(update, context)


def main() -> None:
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("refresh", refresh))
    application.add_handler(CallbackQueryHandler(callback_handler))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
    )

    application.run_polling()
    conn.close()


if __name__ == "__main__":
    main()
